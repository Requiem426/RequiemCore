---
- name: Deploy LEMP stack with WordPress and SFTP
  hosts: localhost
  tasks:
    - name: Download and Install MySQL repository
      yum:
        name: https://repo.mysql.com/mysql84-community-release-el9-1.noarch.rpm
        state: present
        disable_gpg_check: yes

    - name: Install MySQL server and PHP extensions
      yum:
        name:
          - mysql-community-server
          - python3-pip
          - php
          - php-fpm
          - php-mysqlnd
          - php-cli
          - php-common
          - php-json
          - php-opcache
          - php-mbstring
          - php-xml
          - php-curl
          - nginx
        state: present

    - name: Install MySQL Python dependency
      pip:
        name: PyMySQL
        executable: pip3

    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - mysqld
        - php-fpm
        - nginx

    - name: Ensure the 'project' group exists
      ansible.builtin.group:
        name: project
        state: present

    - name: Ensure the 'sftpusers' group exists
      group:
        name: sftpusers
        state: present


    - name: Create project user and group
      user:
        name: project
        password: "{{ 'project' | password_hash('sha512') }}"
        groups: [ sftpusers, nginx ]
        append: yes

    - name: Create project directory structure
      file:
        path: /home/project/project/public
        state: directory
        owner: project
        group: project
        mode: '0755'
        recurse: yes

    - name: Set SELinux permissions
      seboolean:
        name: httpd_enable_homedirs
        state: yes
        persistent: yes


    - name: Configure SFTP access
      copy:
        dest: /etc/ssh/sshd_config.d/sftp.conf
        content: |
          Match Group sftpusers
              ChrootDirectory %h
              ForceCommand internal-sftp
              AllowTcpForwarding no
              X11Forwarding no
              PasswordAuthentication yes

    - name: Restart SSH service
      systemd:
        name: sshd
        state: restarted

    - name: Set SFTP directory permissions
      file:
        path: /home/project
        state: directory
        owner: root
        group: sftpusers
        mode: '0755'

    - name: Set project public directory permissions
      file:
        path: /home/project/project/public
        state: directory
        owner: project
        group: sftpusers
        mode: '0755'

    - name: Download and extract phpMyAdmin
      unarchive:
        src: https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz
        dest: /home/project/project/public/
        remote_src: yes
        creates: /home/project/project/public/phpmyadmin

    - name: Rename phpMyAdmin folder
      shell: >
        mv /home/project/project/public/phpMyAdmin-* /home/project/project/public/phpmyadmin
      args:
        creates: /home/project/project/public/phpmyadmin


    - name: Configure Nginx for WordPress and phpMyAdmin
      copy:
        dest: /etc/nginx/conf.d/project.conf
        content: |
          server {
              listen 80;
              server_name adnan.adnansal.im;

              root /home/project/project/public;
              index index.php index.html;

              # WordPress configuration
              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }
    
              location ~ \.php$ {
                  include fastcgi_params;
                  fastcgi_pass unix:/run/php-fpm/www.sock;
                  fastcgi_index index.php;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
             }

              location ~ /\.ht {
                  deny all;
             }

              # phpMyAdmin configuration
             location /phpmyadmin {
                  root /home/project/project/public;
                  index index.php;
                 try_files $uri $uri/ /index.php;
             }

             location ~ ^/phpmyadmin/(.+\.php)$ {
                  root /home/project/project/public;
                  fastcgi_pass unix:/run/php-fpm/www.sock;
                  fastcgi_index index.php;
                  include fastcgi.conf;
             }
          }

    - name: Remove the separate phpMyAdmin Nginx config (if it exists)
      file:
        path: /etc/nginx/conf.d/phpmyadmin.conf
        state: absent

    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded


    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Download and extract WordPress
      shell: >
        cd /home/project/project/public/ &&
        wget https://wordpress.org/latest.tar.gz &&
        tar -xzf latest.tar.gz &&
        mv wordpress/* . &&
        rm -rf wordpress latest.tar.gz wp-config-sample.php
      args:
        creates: /home/project/project/public/index.php

    - name: Set WordPress file permissions
      file:
        path: /home/project/project/public
        state: directory
        owner: project
        group: project
        mode: '0755'
        recurse: yes

    - name: Configure MySQL
      copy:
        dest: /etc/my.cnf
        content: |
          [mysqld]
          mysql_native_password=ON
          datadir=/var/lib/mysql
          socket=/var/lib/mysql/mysql.sock
          log-error=/var/log/mysqld.log
          pid-file=/var/run/mysqld/mysqld.pid

    - name: Restart MySQL
      service:
        name: mysqld
        state: restarted

    - name: Get MySQL temporary root password
      shell: "grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}'"
      register: mysql_temp_password
      changed_when: false

    - name: Update MySQL root password
      shell: >
        mysqladmin --user=root --password="{{ mysql_temp_password.stdout }}"
        password "Ansible#1"
      ignore_errors: yes

    - name: Configure MySQL database and user
      community.mysql.mysql_db:
        login_user: root
        login_password: "Ansible#1"
        name: wordpress
        state: present

    - name: Create WordPress MySQL user
      community.mysql.mysql_user:
        login_user: root
        login_password: "Ansible#1"
        name: wpuser
        password: "WPUser#1"
        priv: 'wordpress.*:ALL'
        host: localhost
        state: present

    - name: Fetch WordPress salts
      command: curl https://api.wordpress.org/secret-key/1.1/salt/
      register: "wp_salt"

    - name: Generate wp-config.php
      copy:
        dest: /home/project/project/public/wp-config.php
        content: |
          <?php
          define( 'DB_NAME', 'wordpress' );
          define( 'DB_USER', 'wpuser' );
          define( 'DB_PASSWORD', 'WPUser#1' );
          define( 'DB_HOST', 'localhost' );
          define( 'DB_CHARSET', 'utf8mb4' );
          define( 'DB_COLLATE', '' );

          {{ wp_salt.stdout }}

          $table_prefix = 'wp_';
          define( 'WP_DEBUG', false );

          if ( ! defined( 'ABSPATH' ) ) {
              define( 'ABSPATH', __DIR__ . '/' );
          }
          require_once ABSPATH . 'wp-settings.php';
        owner: project
        group: project

    - name: Reload and restart services
      systemd:
        name: "{{ item }}"
        state: restarted
      loop:
        - nginx
        - php-fpm
        - mysqld

    - name: Install WP-CLI
      get_url:
        url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        dest: /usr/local/bin/wp
        mode: '0755'


    - name: Check if WordPress is already installed
      shell: >
        /usr/local/bin/wp core is-installed --path="/home/project/project/public" --allow-root
      register: wp_installed
      failed_when: false
      changed_when: false

    - name: Install WordPress using WP-CLI (if not installed)
      shell: >
        /usr/local/bin/wp core install
        --path="/home/project/project/public"
        --url="http://{{ ansible_default_ipv4.address }}"
        --title="My WordPress Site"
        --admin_user="admin"
        --admin_password="StrongPassword123!"
        --admin_email="admin@example.com"
        --allow-root
      when: wp_installed.rc != 0


    - name: Display WordPress tables
      debug:
        var: db_tables.stdout_lines

    - name: Secure WordPress installation
      command: >
        /usr/local/bin/wp option update blog_public 0
        --path="/home/project/project/public"
        --allow-root
      environment:
        WP_CLI_HOST: "{{ ansible_default_ipv4.address }}"

    - name: Set proper ownership and permissions
      file:
        path: /home/project/project/public
        state: directory
        owner: nginx
        group: nginx
        mode: '0755'
        recurse: yes


    - name: Fix file permissions for WordPress
      ansible.builtin.shell: |
        chown -R nginx:nginx /home/project/project/public
        find /home/project/project/public -type d -exec chmod 755 {} \;
        find /home/project/project/public -type f -exec chmod 644 {} \;
      become: yes

    - name: Find WordPress NGINX config file
      find:
        paths: /etc/nginx/conf.d
        patterns: "project.conf"
      register: nginx_conf

    - name: Ensure NGINX serves static files
      lineinfile:
        path: "{{ nginx_conf.files[0].path }}"
        line: 'location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|otf|svg)$ { expires 6M; access_log off; add_header Cache-Control "public, max-age=15552000"; }'
        insertafter: "server_name .*;"
        state: present
      when: nginx_conf.matched > 0



    - name: Restart NGINX and PHP-FPM
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - nginx
        - php-fpm


- name: Install Certbot and obtain SSL certificate
  hosts: localhost
  become: yes
  tasks:
    - name: Install Certbot, NGINX plugin, and Cron
      yum:
        name:
          - certbot
          - python3-certbot-nginx
          - cronie  # Install cron
        state: present

    - name: Enable and start cron service
      systemd:
        name: crond
        enabled: yes
        state: started

    - name: Obtain SSL certificate
      command: >
        certbot certonly --nginx --non-interactive
        --agree-tos
        --email sarangpopinz@gmail.com
        -d sarang.adnansal.im
      args:
        creates: /etc/letsencrypt/live/sarang.adnansal.im/fullchain.pem

    - name: Configure NGINX with SSL
      lineinfile:
        path: "{{ nginx_conf.files[0].path }}"
        regexp: '^(\s*listen\s+80;)'
        line: '    listen 443 ssl;'
      when: nginx_conf.matched > 0

    - name: Add SSL certificate configuration
      blockinfile:
        path: "{{ nginx_conf.files[0].path }}"
        block: |
          ssl_certificate /etc/letsencrypt/live/sarang.adnansal.im/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/sarang.adnansal.im/privkey.pem;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
      when: nginx_conf.matched > 0

    - name: Enable automatic SSL certificate renewal
      cron:
        name: "Certbot Auto Renewal"
        job: "certbot renew --quiet && systemctl reload nginx"
        minute: "0"
        hour: "3"
        state: present

    - name: Restart NGINX
      service:
        name: nginx
        state: restarted



